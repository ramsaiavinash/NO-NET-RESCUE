## Offline Emergency Guide App - React & Capacitor Development To-Dos

**Phase 1: Project Setup & Initial React Application**

1.  **Create React Project:**
    * Open your terminal.
    * Execute: `npx create-react-app emergency-guide-app`
    * Navigate into the new project directory: `cd emergency-guide-app`
    * (Optional but recommended: Remove default React boilerplate like logo, extra CSS, etc., from `src/App.js`, `src/index.css`, etc.)

2.  **Install & Initialize Capacitor:**
    * Install Capacitor core and CLI as development dependencies:
        `npm install @capacitor/core @capacitor/cli`
    * Initialize Capacitor in your React project. When prompted for the "web directory," enter `build` (this is React's default output folder for production builds):
        `npx cap init`
    * Add native platforms:
        * For iOS: `npx cap add ios`
        * For Android: `npx cap add android`

---

**Phase 2: Content & Data Management (Offline-First)**

1.  **First Aid Guides Content (JSON):**
    * **Recommendation:** Use JSON for structured, easily parsable data.
    * Create directory: `src/data/`
    * Create file: `src/data/firstAidGuides.json`
    * Populate `firstAidGuides.json` with your first aid information. Include fields like `id`, `title`, `summary`, `steps` (array of strings), `warnings` (array of strings), `images` (array of image filenames).
    * Gather all first aid illustration images (e.g., `.png`, `.jpg`).
    * Place all first aid images into the **`public/images/first-aid/`** directory. This ensures they are bundled directly into the native app's assets.

2.  **Emergency Contacts Data (JavaScript Module):**
    * Create file: `src/data/emergencyContacts.js`
    * Define and `export default` an array of contact objects (e.g., `{ name: "Police", number: "100", icon: "police_icon.png" }`).
    * Gather any custom contact icons (e.g., `.png`).
    * Place all contact icons into the **`public/images/contacts/`** directory.

3.  **Siren Audio File:**
    * Acquire or create a high-quality siren audio file (e.g., `siren.mp3`, `.wav`).
    * Place the siren audio file into the **`public/audio/`** directory.

---

**Phase 3: React UI & Logic Development**

1.  **Routing Setup (React Router DOM):**
    * Install: `npm install react-router-dom`
    * In `src/App.js` (or your main entry component), set up `BrowserRouter` and define `Routes` for:
        * `/` (Home/Dashboard)
        * `/first-aid` (List of guides)
        * `/first-aid/:id` (Individual guide detail)
        * `/siren`
        * `/contacts`

2.  **`Home` Component (`src/components/Home.js`):**
    * Create a simple landing page.
    * Add clear navigation links/buttons to First Aid, Siren, and Contacts sections.

3.  **`FirstAidGuides` Component (`src/components/FirstAidGuides.js`):**
    * Import `firstAidGuides.json`.
    * Render a list of first aid guide titles/summaries (e.g., using React's `map` function).
    * Implement a client-side search/filter feature for guides to quickly find relevant information.
    * When a guide is clicked, use `useNavigate` from `react-router-dom` to navigate to the `FirstAidDetail` component (e.g., `Maps('/first-aid/burns')`).

4.  **`FirstAidDetail` Component (`src/components/FirstAidDetail.js`):**
    * Import `firstAidGuides.json`.
    * Use `useParams` from `react-router-dom` to extract the `id` from the URL.
    * Find the specific guide data from `firstAidGuides.json` using the retrieved `id`.
    * Render the guide's full content (title, summary, ordered steps `<ol>`, warnings `<ul>`).
    * For images, use `process.env.PUBLIC_URL + '/images/first-aid/' + imageFileName` to correctly reference bundled assets.

5.  **`Siren` Component (`src/components/Siren.js`):**
    * Create prominent "Play Siren" and "Stop Siren" buttons.
    * Use a React `useRef` to get a reference to an HTML5 `<audio>` element.
    * Implement `onClick` handlers for buttons to call `audioRef.current.play()` and `audioRef.current.pause()`.
    * Set `audioRef.current.loop = true;` for continuous playback when playing.
    * Set `audioRef.current.currentTime = 0;` when stopping to reset the audio to the beginning.
    * **Crucial for Emergency (Siren Volume & Silent Mode Bypass):**
        * **Recommendation for reliable, loud siren:** Install and use `@capacitor-community/native-audio`.
            * Install: `npm install @capacitor-community/native-audio`
            * Follow its documentation for preloading, playing, stopping, setting volume, and looping. This plugin offers more direct control over native audio, potentially allowing the siren to play louder and override silent mode on iOS and Android.
        * If using the native plugin, ensure you call its methods (`preload`, `play`, `stop`, `setVolume`, `loop`) instead of directly manipulating the HTML5 audio element.
        * Add a visual disclaimer about device volume and silent mode if the native plugin can't guarantee overriding it in all scenarios.

6.  **`EmergencyContacts` Component (`src/components/EmergencyContacts.js`):**
    * Import `emergencyContacts` data.
    * Render the contacts in a clear list (name, number, call button/link).
    * For the call action, use an HTML anchor tag with the `tel:` protocol: `<a href="tel:${contact.number}">Call ${contact.name}</a>`. This will correctly prompt the device's native phone app to dial the number.
    * For icons, use `process.env.PUBLIC_URL + '/images/contacts/' + iconFileName`.

---

**Phase 4: Styling & UI/UX**

1.  **Global Styles (`src/index.css` or `src/App.css`):**
    * Implement foundational styles for typography (font family, size), colors, and basic layout.
    * Prioritize readability: use large font sizes for critical information, clear headings.
    * Choose high-contrast color schemes suitable for an emergency app (e.g., dark text on a light background, or vice-versa, avoiding overly complex palettes).

2.  **Component-Specific Styles:**
    * Use CSS Modules (e.g., `ComponentName.module.css`) or a CSS-in-JS library (like Styled Components) or a utility-first framework (like Tailwind CSS) for component-level styling.
    * Focus on clear component layouts, prominent and easily tappable buttons, and intuitive navigation elements.
    * Ensure the UI is responsive and adapts well to various screen sizes (phones, tablets) using flexible layouts (Flexbox, Grid).

---

**Phase 5: Offline Proofing & Capacitor Integration**

1.  **Asset Bundling Verification:**
    * **Critical Step:** Thoroughly check that all images, audio files, CSS, and JavaScript are referenced using paths relative to the `public` directory (or imported directly into React components if they are within `src/`).
    * **Ensure ZERO external dependencies:** Verify that there are absolutely no `http://` or `https://` URLs for any core assets, data, or scripts in your production build. All content must be self-contained within the app bundle.

2.  **Capacitor Sync & Build:**
    * Build your React app for production: `npm run build` (This command compiles your React code and places the optimized static files into the `build` directory).
    * Sync Capacitor to copy these web assets into the native iOS and Android project folders: `npx cap sync`

3.  **Open Native Projects:**
    * For iOS: `npx cap open ios` (This will open the Xcode project for your app).
    * For Android: `npx cap open android` (This will open the Android Studio project for your app).

4.  **Native Project Configuration:**
    * **App Icons & Splash Screens:**
        * Consider using `@capacitor/assets` to help generate icons and splash screens:
            * Install globally: `npm install -g @capacitor/assets`
            * Generate: `npx capacitor-assets generate --ios --android` (Ensure you have a `resources` folder in your project root with your app icon and splash screen source images).
        * Verify and fine-tune these in Xcode (Asset Catalog) and Android Studio (mipmap folders).
    * **Permissions:**
        * In Xcode (`Info.plist`): Add descriptions for any necessary privacy permissions (e.g., if you later decide to add a feature to *save* contacts to the device, or access the microphone for voice notes). For simple `tel:` links, no special permission is typically needed.
        * In Android Studio (`AndroidManifest.xml`): Similarly, add `<uses-permission>` tags if required by any advanced Capacitor plugins you implement.
    * **Siren Audio Specifics (if using native plugin like `@capacitor-community/native-audio`):**
        * Follow the plugin's specific documentation for any required native configuration steps. This might include setting `UIBackgroundModes` in `Info.plist` for iOS (if the siren needs to play when the app is in the background) or configuring Android audio focus settings.

---

**Phase 6: Rigorous Testing (Offline is paramount!)**

1.  **Test on Simulators/Emulators:**
    * Run the app from Xcode (iOS) and Android Studio (Android) on various device emulators.
    * Perform comprehensive tests of all UI flows, ensure first aid guides display correctly, verify siren functionality (play/stop/loop), and check that emergency contact links work.

2.  **Test on Physical Devices (MOST CRITICAL FOR OFFLINE & NATIVE FEATURES):**
    * Connect real iOS and Android devices to your development machine.
    * Run the app directly from Xcode and Android Studio onto these physical devices.
    * **ABSOLUTE MUST: Enable Airplane Mode on ALL Test Devices.**
        * Launch the app. Does it load immediately without any network errors or delays?
        * Navigate through all First Aid guides. Do all text and images load instantly and correctly?
        * Activate the siren. Does it play at the expected maximum volume? Does it loop correctly? Can it be stopped? **Crucially, does it play if the device's physical silent/mute switch is engaged (this is where the native plugin is vital)?**
        * Click on emergency contacts. Do the `tel:` links correctly open the phone dialer with the number pre-filled, allowing the user to initiate a call?

---

**Phase 7: Build for Release & Deployment**

1.  **Final Release Build:**
    * Clean your React build (if necessary) and generate a fresh production build: `npm run build`
    * Sync Capacitor one last time to ensure all latest web assets are in the native projects: `npx cap sync`
    * In Xcode, ensure your build scheme is set to "Release" and then proceed to archive the app for App Store Connect submission.
    * In Android Studio, use the "Generate Signed Bundle / APK..." option to create your release-ready Android App Bundle (`.aab`) or APK.

2.  **App Store Submission:**
    * Prepare all necessary app store assets: high-quality screenshots for various device sizes, compelling promotional text, a clear privacy policy (even for an offline app, stating data is not collected), and any other required metadata.
    * Carefully follow the specific submission guidelines and requirements for both the Apple App Store and Google Play Store.